import Head from 'next/head';
import Image from 'next/image';
import SearchBar from '../components/SearchBar';
import styles from '../styles/Home.module.css';
import { useState, useEffect} from 'react';
import Layout from '../components/Layout';

export default function Home() {
  const [name, setName] = useState('');
  const [filteredList, setFilteredList] = useState([]);
  const [checked, setChecked] = useState([]);

  const languages = ["Python", "R"];
  const dataset_size = ["Small", "Medium", "Large"];
  const date = ["Last 90 days", "Last week", "Today"];


  let projects = [
    {
      project_name: 'WiDS 2022 - create folds',
      url: 'https://www.kaggle.com/isha20/wids-2022-create-folds',
      library: ['pandas', 'numpy'],
      language: 'Python',
      tags: null,
    },
    {
      project_name: 'Breast Cancer | EDA + Prediction | 99% acc',
      url: 'https://www.kaggle.com/asatbek/breast-cancer-eda-prediction-99-acc',
      library: [
        'pandas',
        'numpy',
        'scipy.stats',
        'matplotlib.pyplot',
        'seaborn',
      ],
      language: 'Python',
      tags: null,
    },
    {
      project_name: 'fraud_detection',
      url: 'https://www.kaggle.com/akouaorsot/fraud-detection',
      library: ['dplyr', 'tidyverse', 'ggplot2'],
      language: 'R',
      tags: null,
    },
    {
      project_name: 'Predicting Disaster Tweets NLP in R Programming',
      url: 'https://www.kaggle.com/sachinudgam/predicting-disaster-tweets-nlp-in-r-programming',
      library: ['quanteda', 'ggplot2', 'caret'],
      language: 'R',
      tags: null,
    },
    {
      project_name: 'Whales&Dolphins: EffNet Embedding cos Distance',
      url: 'https://www.kaggle.com/andradaolteanu/whales-dolphins-effnet-embedding-cos-distance',
      library: ['torch', 'pandas', 'seaborn', 'numpy'],
      language: 'Python',
      tags: null,
    },
    {
      project_name: 'Austism Prediction with Random Forest',
      url: 'https://www.kaggle.com/sidharkal/autism-prediction-with-random-forest',
      library: ['numpy', 'pandas'],
      language: 'PYthon',
      tags: null,
    },
    {
      project_name: 'California Birth Rates (Exploratory Analysis)',
      url: 'https://www.kaggle.com/yonkotoshiro/california-birth-rates-exploratory-analysis',
      library: ['pandas', 'plotly'],
      language: 'Python',
      tags: null,
    },
    {
      project_name: 'Credit Card Fraud Analysis',
      url: 'https://www.kaggle.com/heyrobin/credit-card-fraud-analysis-eda',
      library: ['numpy', 'pandas'],
      language: 'Python',
      tags: [
        'Data Visualization',
        'Exploratory Data Analysis',
        'Data Analytics',
        'Banking',
        'Insurance',
      ],
    },
    {
      project_name: 'Wine Quality',
      url: 'https://www.kaggle.com/qusaybtoush/wine-quality',
      library: ['pandas', 'numpy', 'seaborn', 'matplotlib.pyplot'],
      language: 'Python',
      tags: [
        'Data Visualization',
        'Classification',
        'Data Analytics',
        'Linear Regression',
      ],
    },
    {
      project_name: 'Titanic',
      url: 'https://www.kaggle.com/foocheechuan/titanic',
      library: ['pandas', 'numpy'],
      language: 'Python',
      tags: ['Beginner', 'Classification', 'Categorical Data'],
    },
  ];

  // searchbox filtering
  useEffect(() => {
    const results = projects.filter(
      (project) =>
        project.project_name.toLowerCase().includes(name) +
        project.project_name.toUpperCase().includes(name) +
        project.language.toLowerCase().includes(name) +
        project.language.toUpperCase().includes(name)

      // project.library.includes(name)
    );
    setFilteredList(results);
  }, [name]);

  // Add/Remove checked item from list
  const handleCheck = (event) => {
    var updatedList = [...checked];
    if (event.target.checked) {
      updatedList = [...checked, event.target.value];
    } else {
      updatedList.splice(checked.indexOf(event.target.value), 1);
    }
    setChecked(updatedList);
  };

  // Generate string of checked items
  const checkedItems = checked.length
    ? checked.reduce((total, item) => {
        return total + ", " + item;
      })
    : "";

  // Return classes based on whether item is checked
  var isChecked = (item) =>
    checked.includes(item) ? "checked-item" : "not-checked-item";


  return (
    <Layout>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <div style={{ textAlign: 'center' }}>
        <img width='100' src='logo.png' />
        <h2 style={{ color: 'white' }}>DataSearch</h2>
      </div>

      <SearchBar
        placeholder='Search projects...'
        getQuery={(q) => setName(q)}
      />
      <div className={styles.content}>
        <div className={styles.filterBox}>
          <h3 style={{color: 'black'}}>Filters</h3>
          <div style={{color:'black', fontSize: '12px'}}>
            {`Showing results for: ${checkedItems}`}
          </div>
          <br></br>
          <div className="filters">
            <h5>Date:</h5>
              {date.map((item, index) => (
                <div key={index}>
                  <input value={item} type="checkbox" onChange={handleCheck} />
                  <span className={ (item)}>{item}</span>
                </div>
              ))}
            <h5>Language:</h5>
              {languages.map((item, index) => (
                <div key={index}>
                  <input value={item} type="checkbox" onChange={handleCheck} />
                  <span className={isChecked(item)}>{item}</span>
                </div>
              ))}
              <h5>Dataset Size:</h5>
              {dataset_size.map((item, index) => (
                <div key={index}>
                  <input value={item} type="checkbox" onChange={handleCheck} />
                  <span className={isChecked(item)}>{item}</span>
                </div>
              ))}
          </div>
          
         
        </div>
        <div className={styles.resultsBox}>
          <table className={styles.DailyEvents}>
            <thead>
              <tr>
                <th>Project Name</th>
                <th>Language</th>
                <th>Libraries</th>
                <th>Tags</th>
              </tr>
            </thead>
            <tbody>
              {filteredList.map((project, index) => (
                <tr className={styles.row} key={index}>
                  <td>{project.project_name}</td>
                  <td>{project.language}</td>
                  <td>{project.library}</td>
                  <td>{project.tags}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* <footer className={styles.footer}>
        <a
          href='https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app'
          target='_blank'
          rel='noopener noreferrer'
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src='/vercel.svg' alt='Vercel Logo' width={72} height={16} />
          </span>
        </a>
      </footer> */}
    </Layout>
  );
}
